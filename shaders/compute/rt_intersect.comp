#version 460

layout (local_size_x = 16, local_size_y = 16) in;

layout(rgba16f,set = 0, binding = 0) uniform image2D image;

layout(std430, set = 0, binding = 1) buffer RayGenIn
{
    vec4 data[];
} ray_buffer;

layout(std430, set = 0, binding = 2) buffer ModelIn
{
	uvec4 size;
    uint data[];
} model_buffer;

layout( push_constant ) uniform PushConstants
{
	mat4 camera_matrix;
} push_constants;

vec3 get_translation_from_matrix(mat4 matrix)
{
	return vec3(matrix[3][0], matrix[3][1], matrix[3][2]);
}

#define FLT_MAX (1.0 / 0.0)
#define EPSILON 0.001f

struct Ray
{
	vec3 direction;
	vec3 position;
};

struct IntersectionState
{
	float t;
};

uint from_3d_to_1d(ivec3 in_3d, uvec4 model_size)
{
	return in_3d[0] + in_3d[2] * model_size.x + in_3d[1] * model_size.x * model_size.y;
}

float DDA(inout IntersectionState state, Ray ray)
{
    ivec3 voxel_position = ivec3(floor(ray.position));

    // If we start inside a voxel, return
    if (model_buffer.data[from_3d_to_1d(voxel_position, model_buffer.size)] == 1)
    {
        return 0.0f;
    }

    // Voxel Marching
    const ivec3 step_direction_sign = ivec3(sign(ray.direction));

    vec3 t_max = vec3(0.0);
    const vec3 t_delta = abs(vec3(1.0f) / ray.direction);
	
    // Calculate initial t_max
    for (int l = 0; l < 3; l++)
    {
        if (step_direction_sign[l] < 0)
        {
            t_max[l] = (ray.position[l] - float(voxel_position[l])) * t_delta[l];
        }
        else
        {
            t_max[l] = (float(voxel_position[l]) + 1.0 - ray.position	[l]) * t_delta[l];
        }
    }

	uint check = model_buffer.size.x + model_buffer.size.y + model_buffer.size.z;
    while (check > 0)
    {
        // Find the smallest t_max component
        int axis = int(t_max.y < t_max.x);
        if (t_max.z < t_max[axis])
        {
            axis = 2;
        }

        voxel_position[axis] += step_direction_sign[axis];
        t_max[axis] += t_delta[axis];

        // Check bounds
        if (voxel_position[axis] < 0 || voxel_position[axis] >= model_buffer.size[axis])
        {
            return FLT_MAX;
        }

        uint world_index = from_3d_to_1d(voxel_position, model_buffer.size);
        if (model_buffer.data[world_index] == 1)
        {
            return t_max[axis] - t_delta[axis];
        }
		check -= 1;
    }
	return FLT_MAX;
}


vec4 intersect_aabb(vec3 aabbmin, vec3 aabbmax, Ray ray)
{
	vec3 inv_dir = 1.0f / ray.direction;
	vec3 ti = (aabbmin - ray.position) * inv_dir;
	vec3 ta = (aabbmax - ray.position) * inv_dir;
	vec3 axis_min = min(ti, ta);
	vec3 axis_max = max(ti, ta);
	float tmin = max(axis_min.x, max(axis_min.y, axis_min.z));
	float tmax = min(axis_max.x, min(axis_max.y, axis_max.z));

	if (tmax >= tmin && tmin > 0.0f)
	{
		vec3 normal = -(vec3(1.0f) - step(axis_min, vec3(tmin) - EPSILON)) * sign(ray.direction);

		int axis = int(abs(normal.y) > abs(normal.x));
		if (abs(normal.z) > abs(normal[axis]))
		{
			axis = 2;
		};
		float norm = normal[axis];
		normal = vec3(0.0f);
		normal[axis] = norm;
			
		return vec4(tmin, normal);
	}
	else
	{
		return vec4(FLT_MAX, tmin, tmax, 0.0f);
	}
}

void intersect(inout IntersectionState state, Ray ray)
{
	vec4 t_normal = intersect_aabb(vec3(0.0f), vec3(model_buffer.size), ray);
	
	if (t_normal.x != FLT_MAX)
	{
		ray.position = clamp(ray.position + ray.direction * (t_normal.r - EPSILON), vec3(EPSILON), vec3(model_buffer.size) - vec3(EPSILON));
		float t = DDA(state, ray);
		t_normal.x += t;

		if (t == FLT_MAX)
			t_normal.x = 10000.0f;
	}


	state.t = t_normal.r;
}

void main()
{
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(image);
    uint index = texelCoord.x + texelCoord.y * size.x;

	Ray new_ray;
	new_ray.position = get_translation_from_matrix(push_constants.camera_matrix);
	new_ray.direction = ray_buffer.data[index].rgb;

	IntersectionState state;
	state.t = FLT_MAX;
	intersect(state, new_ray);

	if (state.t != FLT_MAX)
	{
		float max_depth_length = max(model_buffer.size.x, max(model_buffer.size.y, model_buffer.size.z)) + 256.0f;
		imageStore(image, texelCoord, vec4(state.t, state.t, state.t, 1.0f) / max_depth_length);
	}
	else
	{
    	imageStore(image, texelCoord, ray_buffer.data[index]);
	}
}
