#version 460

#include "common.glsl"

#define MODEL_INSTANCE_COUNT 64

struct ModelHeader
{
	ivec4 index_and_size;
	mat4 inverse_transform;
};

layout (local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0) buffer RayGenIn
{
    Ray rays[];
} ray_buffer;

layout(set = 0, binding = 1) buffer ModelIn
{
	ModelHeader headers[MODEL_INSTANCE_COUNT];
    uint data[];
} model_buffer;

layout(std430, set = 0, binding = 2) buffer IntersectOut
{
	IntersectResult results[];
} intersection_buffer;

layout(push_constant) uniform PushConstants
{
	mat4 camera_matrix;
	ivec2 render_extent;
} push_constants;

struct IntersectionState
{
	float t;
	vec3 debug_float;
	vec3 normal;
};

uint from_3d_to_1d(ivec3 in_3d, ivec3 model_size, int model_offset)
{
	int index = model_offset + (in_3d[0] + in_3d[1] * model_size.x + in_3d[2] * model_size.x * model_size.y);
	return index;
}

vec4 DDA(inout IntersectionState state, Ray ray, inout ModelHeader header, ivec3 voxel_start_position)
{
    ivec3 voxel_position = voxel_start_position;
	ivec3 size = header.index_and_size.gba;

    // If we start inside a voxel, return
    if (model_buffer.data[from_3d_to_1d(voxel_position, size, header.index_and_size.x)] != 0)
    {
        return vec4(0.0f);
    }


    // Voxel Marching
	const ivec3 t_sign = ivec3(sign(ray.direction));
    const vec3 t_delta = abs(vec3(1.0f) / ray.direction);
	vec3 t_max = abs(fract(ray.position) - max(t_sign, vec3(0))) * t_delta;

	uint check = size.x + size.y + size.z;
    while (check > 0)
    {
        // Find the smallest t_max component
        int axis = int(t_max.y < t_max.x);
        if (t_max.z < t_max[axis])
        {
            axis = 2;
        }

        voxel_position[axis] += t_sign[axis];
        t_max[axis] += t_delta[axis];

        // Check bounds
		if (voxel_position[axis] < 0 || voxel_position[axis] >= size[axis])
		{
			return vec4(FLT_MAX, 0.0f, 0.0f, 0.0f);
        }

        uint world_index = from_3d_to_1d(voxel_position, size, header.index_and_size.x);
        if (model_buffer.data[world_index] != 0)
        {
			vec3 normal = vec3(0.0f);
			normal[axis] = -t_sign[axis];
            return vec4(t_max[axis] - t_delta[axis], normal);
        }
		check -= 1;
    }
	return vec4(FLT_MAX, 0.0f, 0.0f, 0.0f);
}


vec4 intersect_aabb(vec3 aabbmin, vec3 aabbmax, Ray ray)
{
	vec3 inv_dir = 1.0f / ray.direction;
	vec3 ti = (aabbmin - ray.position) * inv_dir;
	vec3 ta = (aabbmax - ray.position) * inv_dir;
	vec3 axis_min = min(ti, ta);
	vec3 axis_max = max(ti, ta);
	float tmin = max(axis_min.x, max(axis_min.y, axis_min.z));
	float tmax = min(axis_max.x, min(axis_max.y, axis_max.z));

	if (tmax >= tmin && tmin > 0.0f)
	{
		vec3 normal = -(vec3(1.0f) - step(axis_min, vec3(tmin) - EPSILON)) * sign(ray.direction);

		int axis = int(abs(normal.y) > abs(normal.x));
		if (abs(normal.z) > abs(normal[axis]))
		{
			axis = 2;
		};

		float norm = normal[axis];
		normal = vec3(0.0f);
		normal[axis] = norm;

		return vec4(tmin, normal);
	}
	else
	{
		return vec4(FLT_MAX, tmin, tmax, 0.0f);
	}
}

void intersect(inout IntersectionState state, Ray ray)
{
	for(int i = 0; i < MODEL_INSTANCE_COUNT; i++)
	{
		int header_index = model_buffer.headers[i].index_and_size.x;
		ivec3 model_size = model_buffer.headers[i].index_and_size.yzw;
		if (model_size.x + model_size.y + model_size.z == 0)
			break;

		vec3 half_size = vec3(model_size) * 0.5f;

		Ray aabb_ray = ray;
		aabb_ray.position = (model_buffer.headers[i].inverse_transform * vec4(aabb_ray.position, 1.0f)).rgb;
		aabb_ray.direction = normalize(model_buffer.headers[i].inverse_transform * vec4(aabb_ray.direction, 0.0f)).rgb;

		vec4 t_normal = vec4(0.0f, 1.0f, 1.0f, 1.0f);
		// If not inside the AABB
		if (aabb_ray.position != clamp(aabb_ray.position, -half_size, half_size))
		{
			t_normal = intersect_aabb(-half_size, half_size, aabb_ray);
		}

		// Closer than
		if (t_normal.x <= state.t)
		{
			vec3 hit_pos = ray.position + ray.direction * (t_normal.r - EPSILON);
			vec3 in_volume_position = (model_buffer.headers[i].inverse_transform * vec4(hit_pos, 1.0f)).xyz + half_size;
			ivec3 voxel_position = ivec3(floor(in_volume_position));

			Ray dda_ray;
			dda_ray.position = clamp(in_volume_position, vec3(EPSILON), model_size - vec3(EPSILON));;
			dda_ray.direction = aabb_ray.direction;

			voxel_position = clamp(voxel_position, ivec3(0), ivec3(model_size) - ivec3(1));

			vec4 dda_t_normal = DDA(state, dda_ray, model_buffer.headers[i], voxel_position);

			float total_distance = t_normal.x + dda_t_normal.x;
			if (total_distance < state.t)
			{
				state.t = min(state.t, total_distance);

				state.normal = (dda_t_normal.x <= EPSILON) ? t_normal.gba : dda_t_normal.gba;
			}
		}
	}
}

void main()
{
    ivec2 texel_coord = ivec2(gl_GlobalInvocationID.xy);
    uint index = texel_coord.x + texel_coord.y * push_constants.render_extent.x;

	if (texel_coord.x >= push_constants.render_extent.x ||
		texel_coord.y >= push_constants.render_extent.y)
	{
		return;
	}

	Ray ray = ray_buffer.rays[index];

	IntersectionState state;
	state.t = FLT_MAX;

	intersect(state, ray);

	intersection_buffer.results[index].hit_distance = state.t;
	intersection_buffer.results[index].incoming_direction = ray.direction;
	intersection_buffer.results[index].normal = state.normal;
}
