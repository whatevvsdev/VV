#version 460

#include "common.glsl"

layout (local_size_x = 16, local_size_y = 16) in;

layout(std430, set = 0, binding = 0) buffer RayGenOut
{
    Ray rays[];
} ray_buffer;

layout(push_constant) uniform PushConstants
{
	mat4 camera_matrix;
	ivec2 render_extent;
} push_constants;

vec3 generate_pinhole_ray_direction(ivec2 image_size, mat4 matrix)
{
	const float fov = 90.0f;

	float tan_half_angle = tan(radians(fov) / 2.0f);
	float aspect_scale = image_size.y / 2.0f;
  
	vec2 pixel = vec2(gl_GlobalInvocationID.xy) + vec2(0.5f) - (image_size / 2.0f);
  
	vec3 direction = normalize(vec3(vec2(pixel.x, -pixel.y) * tan_half_angle / aspect_scale, -1));
  
	return (matrix * vec4(direction, 0.0f)).xyz;
}

void main()
{
	ivec2 texel_coord = ivec2(gl_GlobalInvocationID.xy);
	uint index = texel_coord.x + texel_coord.y * push_constants.render_extent.x;

	if (texel_coord.x >= push_constants.render_extent.x ||
	texel_coord.y >= push_constants.render_extent.y)
	{
		return;
	}

	Ray generated_ray;
	generated_ray.position = get_translation_from_matrix(push_constants.camera_matrix);
	generated_ray.direction = generate_pinhole_ray_direction(push_constants.render_extent, push_constants.camera_matrix);

    ray_buffer.rays[index] = generated_ray;
}
